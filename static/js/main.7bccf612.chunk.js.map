{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cards","id","color","Boolean","window","location","hostname","match","ReactDOM","render","className","lineColor","map","item","key","dateText","style","dateInnerStyle","background","bodyContainerStyle","padding","borderRadius","boxShadow","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAMMA,G,aAAQ,CACZ,CACEC,GAAI,EACJC,MAAO,WAET,CACED,GAAI,EACJC,MAAO,WAET,CACED,GAAI,EACJC,MAAO,qBAET,CACED,GAAI,EACJC,MAAO,WAET,CACED,GAAI,EACJC,MAAO,QAET,CACED,GAAI,EACJC,MAAO,QAET,CACED,GAAI,EACJC,MAAO,QAET,CACED,GAAI,EACJC,MAAO,aCzBSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAD,KACE,mBF+Be,WACjB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,UAAW,WAClBX,EAAMY,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,eAAD,CACEA,IAAKD,EAAKZ,GACVc,SAAS,mDACTC,MAAO,CAAEd,MAAsB,SAAfW,EAAKX,MAAmB,OAASW,EAAKX,OACtDe,eAAgB,CACdC,WAAYL,EAAKX,MACjBA,MAAsB,SAAfW,EAAKX,MAAmB,OAAS,QAE1CiB,mBAAoB,CAClBD,WAAY,OACZE,QAAS,OACTC,aAAc,MACdC,UAAW,iCAGb,wBACEZ,UAAU,cADZ,0GAOA,uBAAGA,UAAU,aAAb,oVE5DZ,OAEFa,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7bccf612.chunk.js","sourcesContent":["import React from 'react'\nimport { Switch } from 'react-router-dom'\nimport { Timeline, TimelineItem } from 'vertical-timeline-component-for-react'\nimport './App.css'\nimport { template } from '@babel/core'\n\nconst cards = [\n  {\n    id: 1,\n    color: '#ffc700'\n  },\n  {\n    id: 2,\n    color: '#64b441'\n  },\n  {\n    id: 3,\n    color: 'rgb(30, 136, 229)'\n  },\n  {\n    id: 4,\n    color: '#5b2c0c'\n  },\n  {\n    id: 5,\n    color: '#bbb'\n  },\n  {\n    id: 6,\n    color: '#000'\n  },\n  {\n    id: 7,\n    color: '#fff'\n  },\n  {\n    id: 8,\n    color: '#ff0000'\n  }\n]\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Switch>\n          <Timeline lineColor={'#e3e3e3'}>\n            {cards.map((item, key) => (\n              <TimelineItem\n                key={item.id}\n                dateText=\"Пн 10 Фев 2020 20:50:51\"\n                style={{ color: item.color === '#fff' ? '#333' : item.color }} // кружок\n                dateInnerStyle={{\n                  background: item.color, // дата фон\n                  color: item.color === '#fff' ? '#333' : '#fff' // дата буквы\n                }}\n                bodyContainerStyle={{\n                  background: '#fff',\n                  padding: '20px',\n                  borderRadius: '8px',\n                  boxShadow: '0.5rem 0.5rem 2rem 0 #575756'\n                }}\n              >\n                <h3\n                  className=\"card-title\"\n                  // style={{ color: item.color === '#fff' ? '#333' : item.color }} // цвет заголовка\n                >\n                  Изменение статуса OZON\n                </h3>\n                {/* <h4>Subtitle</h4> */}\n                <p className=\"card-text\">\n                  Статус OZON: отправление зарегестрировано, место: ЧЕРНАЯ_ГРЯЗЬ_РФЦ\n                </p>\n              </TimelineItem>\n            ))}\n          </Timeline>\n        </Switch>\n      </header>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}